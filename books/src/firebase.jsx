/** @jsxImportSource @emotion/react */
import { css } from '@emotion/react';
import { initializeApp } from "firebase/app";
import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut
} from "firebase/auth";
import {
  getFirestore,
  collection,
  addDoc,
  getDocs,
  updateDoc,
  deleteDoc,
  doc
} from "firebase/firestore";
import { getAnalytics } from "firebase/analytics";

// Firebase –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const firebaseConfig = {
  apiKey: "AIzaSyA4nrkUrVWEnREjXYaMX41d4Q3e6XGqB-k",
  authDomain: "books-e154d.firebaseapp.com",
  projectId: "books-e154d",
  storageBucket: "books-e154d.firebasestorage.app",
  messagingSenderId: "322664561254",
  appId: "1:322664561254:web:cd8d5d8f2ef86d446acba7",
  measurementId: "G-WE99H72HY6"
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = initializeApp(firebaseConfig);
const auth = getAuth(app);
const db = getFirestore(app);
const analytics = getAnalytics(app);

// üîê –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
export const registerUser = async (email, password) => {
  try {
    await createUserWithEmailAndPassword(auth, email, password);
    console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –±–µ—à–µ —É—Å–ø–µ—à–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–∞–Ω!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è—Ç–∞:", error.message);
    throw new Error(error.message);
  }
};

// üîê –í—Ö–æ–¥
export const loginUser = async (email, password) => {
  try {
    await signInWithEmailAndPassword(auth, email, password);
    console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç —É—Å–ø–µ—à–Ω–æ –≤–ª–µ–∑–µ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–∞:", error.message);
    throw new Error(error.message);
  }
};

// üîê –ò–∑—Ö–æ–¥
export const logoutUser = async () => {
  try {
    await signOut(auth);
    console.log("–ü–æ—Ç—Ä–µ–±–∏—Ç–µ–ª—è—Ç –∏–∑–ª–µ–∑–µ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ö–æ–¥–∞:", error.message);
    throw new Error(error.message);
  }
};

// ‚úçÔ∏è –î–æ–±–∞–≤—è–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏–µ (–∫–∞—Ç–æ –ø–æ–¥-–∫–æ–ª–µ–∫—Ü–∏—è –Ω–∞ –∫–Ω–∏–≥–∞)
export const addReview = async (bookId, reviewText) => {
  try {
    const reviewRef = collection(db, `books/${bookId}/reviews`);
    await addDoc(reviewRef, {
      text: reviewText,
      userId: auth.currentUser.uid,
      userEmail: auth.currentUser.email,
      timestamp: new Date()
    });
    console.log("–ú–Ω–µ–Ω–∏–µ—Ç–æ –µ –¥–æ–±–∞–≤–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤—è–Ω–µ—Ç–æ –Ω–∞ –º–Ω–µ–Ω–∏–µ:", error.message);
    throw new Error(error.message);
  }
};

// üì• –ó–∞—Ä–µ–∂–¥–∞–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏—è –∑–∞ –∫–Ω–∏–≥–∞
export const getReviews = async (bookId) => {
  try {
    const reviewsSnapshot = await getDocs(collection(db, `books/${bookId}/reviews`));
    return reviewsSnapshot.docs.map(doc => ({
      id: doc.id,
      ...doc.data()
    }));
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –≤–∑–∏–º–∞–Ω–µ—Ç–æ –Ω–∞ –º–Ω–µ–Ω–∏—è:", error.message);
    return [];
  }
};

// üìù –†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏–µ
export const updateReview = async (bookId, reviewId, newText) => {
  try {
    const reviewRef = doc(db, `books/${bookId}/reviews/${reviewId}`);
    await updateDoc(reviewRef, {
      text: newText,
      timestamp: new Date()
    });
    console.log("–ú–Ω–µ–Ω–∏–µ—Ç–æ –µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏–µ:", error.message);
    throw new Error(error.message);
  }
};

// ‚ùå –ò–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏–µ
export const deleteReview = async (bookId, reviewId) => {
  try {
    const reviewRef = doc(db, `books/${bookId}/reviews/${reviewId}`);
    await deleteDoc(reviewRef);
    console.log("–ú–Ω–µ–Ω–∏–µ—Ç–æ –µ –∏–∑—Ç—Ä–∏—Ç–æ —É—Å–ø–µ—à–Ω–æ!");
  } catch (error) {
    console.error("–ì—Ä–µ—à–∫–∞ –ø—Ä–∏ –∏–∑—Ç—Ä–∏–≤–∞–Ω–µ –Ω–∞ –º–Ω–µ–Ω–∏–µ:", error.message);
    throw new Error(error.message);
  }
};

// –ï–∫—Å–ø–æ—Ä—Ç
export { auth, db };
